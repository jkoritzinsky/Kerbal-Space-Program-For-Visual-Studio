@namespace KSP4VS.ConfigNode
@classname NodeParser
@start nodes

whitespace = "" [ \t]+
_ = whitespace?
eq =  "=" 
bro =  "{" 
brc  =  "}"
newline = "\r\n" / "\n" 

comment -lexical =  "//" [^\r\n]* ("\r\n" / "\n")?  
newlineOrComment = "" _ (newline / comment)+

string -lexical = "" [^\r\n=]+
bool -lexical = [Tt]"rue" / [Ff]"alse" &newlineOrComment
number -lexical = '-'? [0-9]+ ('.' [0-9]+)?
numberListComma -lexical = "" (number) ("" _ "," _ number)*
numberListSpace -lexical ="" (number !( _ "," _)) ("" whitespace !(",") _ number)*
numberList -lexical ="" (numberListSpace / numberListComma) &newlineOrComment


name -lexical =  "" [A-Za-z_]+ 
name_InvalidChar -lexical = "" ([^/{} \t\r\n=])+

topOp = "" [@+$%!-]
MMnamePattern = "" [A-Za-z0-9?*_-]+
MMnamePattern_InvalidChar -lexical = "" [^\]]+
nameSelector = "[" ((MMnamePattern ("," MMnamePattern)?) / MMnamePattern_InvalidChar)?  "]"
MMname -lexical = topOp name
MMselectWithOp = MMname nameSelector?
MMselectWithoutOp = name nameSelector

hasOp = [@!#~]
hasBody = (hasOp MMselectWithoutOp hasExpression*) / MMnamePattern_InvalidChar
hasDeclaration -lexical = "HAS"
hasExpression = ":" hasDeclaration "[" hasBody "]"

flexOrderDeclaration -lexical = "BEFORE" / "FOR" / "AFTER"
finalOrderDeclaration -lexical = "FINAL"
orderSpecifiers = &{IsTopLevelNode(state)} ":" ((flexOrderDeclaration nameSelector) / finalOrderDeclaration)

MMnodeSelector = (MMselectWithOp / MMselectWithoutOp) (hasExpression/orderSpecifiers)*

valueName -lexical = (name / name_InvalidChar) name_InvalidChar?
nodeName -lexical = (MMnodeSelector / name / name_InvalidChar) name_InvalidChar? 

value =  bool / numberList / string
variable -lexical = "#$" ("/"? (("@" name nameSelector?) / "..") ("/"(("@" name nameSelector?) / ".."))* "/")? name ("[" [0-9]+ ("," .)? "]")? "$" 
variableList -lexical = variable (_ variable)* &newlineOrComment

MMvalue = variableList / bool / numberList / string

mathOp = [+*%^/-]

MMvalueName = !name (MMselectWithOp / name_InvalidChar) name_InvalidChar?

MMnameValuePair -lexical = MMvalueName _ mathOp? eq _ MMvalue

nameValuePair -lexical = valueName _ eq _ v:("" value?) 

nameValuePair_noEq -lexical = _ valueName 

nameValuePair_all = _ (MMnameValuePair / nameValuePair / nameValuePair_noEq) newlineOrComment 

configNodeBody = _ (configNode_all  / nameValuePair_all  / (whitespace / newlineOrComment))* _

configNode  -lexical = _ nodeName _ newlineOrComment? _ bro newlineOrComment? _ configNodeBody newlineOrComment? _ brc _ newlineOrComment?

configNode_noClose  -lexical = _ nodeName _ newlineOrComment _ bro configNodeBody _ newlineOrComment?

configNode_all  = configNode / configNode_noClose

nodes  -lexical = configNodeBody 
